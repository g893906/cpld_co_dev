/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2005 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic       
functions, and any output files any of the foregoing           
(including device programming or simulation files), and any    
associated documentation or information are expressly subject  
to the terms and conditions of the Altera Program License      
Subscription Agreement, Altera MegaCore Function License       
Agreement, or other applicable license agreement, including,   
without limitation, that your use is for the sole purpose of   
programming logic devices manufactured by Altera and sold by   
Altera or its authorized distributors.  Please refer to the    
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	SIMULATION_TIME = 50000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("__adc_state")
{
	VALUES = "adc_state.idle", "adc_state.adc_ready", "adc_state.adc_receive", "adc_state.adc_conversion", "adc_state.adc_data_load";
}

SIGNAL("bit_count")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = REGISTERED;
	PARENT = "";
}

SIGNAL("bit_count[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "bit_count";
}

SIGNAL("bit_count[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "bit_count";
}

SIGNAL("bit_count[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "bit_count";
}

SIGNAL("bit_count[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "bit_count";
}

SIGNAL("bit_count[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "bit_count";
}

SIGNAL("bit_count[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "bit_count";
}

SIGNAL("adc_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("enable")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("reset")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("sdat_in")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("cs_n")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("adc_state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__adc_state";
}

SIGNAL("data_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data_out[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data_out";
}

SIGNAL("data_ready")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("div_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = REGISTERED;
	PARENT = "";
}

TRANSITION_LIST("bit_count[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 23510.041;
		LEVEL 1 FOR 20728.835;
		LEVEL 0 FOR 5761.124;
	}
}

TRANSITION_LIST("bit_count[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 12843.545;
		LEVEL 1 FOR 10666.496;
		LEVEL 0 FOR 10666.496;
		LEVEL 1 FOR 10062.339;
		LEVEL 0 FOR 5761.124;
	}
}

TRANSITION_LIST("bit_count[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7510.297;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5333.248;
			LEVEL 0 FOR 5333.248;
		}
		LEVEL 1 FOR 4729.091;
		LEVEL 0 FOR 5270.749;
		LEVEL 1 FOR 490.375;
	}
}

TRANSITION_LIST("bit_count[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4843.673;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 2666.624;
			LEVEL 0 FOR 2666.624;
		}
		LEVEL 1 FOR 2062.467;
		LEVEL 0 FOR 2604.125;
		LEVEL 1 FOR 2666.624;
		LEVEL 0 FOR 490.375;
	}
}

TRANSITION_LIST("bit_count[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3510.361;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 1333.312;
			LEVEL 0 FOR 1333.312;
		}
		LEVEL 1 FOR 729.155;
		LEVEL 0 FOR 1270.813;
		LEVEL 1 FOR 1333.312;
		LEVEL 0 FOR 1333.312;
		LEVEL 1 FOR 1333.312;
		LEVEL 0 FOR 490.375;
	}
}

TRANSITION_LIST("bit_count[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2843.705;
		NODE
		{
			REPEAT = 31;
			LEVEL 1 FOR 666.656;
			LEVEL 0 FOR 666.656;
		}
		LEVEL 1 FOR 62.499;
		LEVEL 0 FOR 604.157;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 666.656;
			LEVEL 0 FOR 666.656;
		}
		LEVEL 1 FOR 666.656;
		LEVEL 0 FOR 490.375;
	}
}

TRANSITION_LIST("adc_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4843.673;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 666.656;
			LEVEL 0 FOR 666.656;
		}
		LEVEL 1 FOR 666.656;
		LEVEL 0 FOR 31999.488;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 666.656;
			LEVEL 0 FOR 666.656;
		}
		LEVEL 1 FOR 490.375;
	}
}

TRANSITION_LIST("clock")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2400;
			LEVEL 0 FOR 10.417;
			LEVEL 1 FOR 10.416;
		}
		LEVEL 0 FOR 0.8;
	}
}

TRANSITION_LIST("enable")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 2205.0;
		LEVEL 1 FOR 47780.0;
	}
}

TRANSITION_LIST("reset")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 75.0;
		LEVEL 1 FOR 765.0;
		LEVEL 0 FOR 49160.0;
	}
}

TRANSITION_LIST("sdat_in")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 250.0;
			LEVEL 1 FOR 250.0;
		}
	}
}

TRANSITION_LIST("cs_n")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 10.417;
		LEVEL 0 FOR 83.332;
		LEVEL 1 FOR 2145.799;
		LEVEL 0 FOR 12624.798;
		LEVEL 1 FOR 29332.864;
		LEVEL 0 FOR 20.833;
		LEVEL 1 FOR 20.833;
		LEVEL 0 FOR 5761.124;
	}
}

TRANSITION_LIST("adc_state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL adc_state.idle FOR 10.417;
		LEVEL adc_state.adc_ready FOR 83.332;
		LEVEL adc_state.idle FOR 2145.799;
		LEVEL adc_state.adc_ready FOR 2624.958;
		LEVEL adc_state.adc_receive FOR 9999.84;
		LEVEL adc_state.adc_conversion FOR 29332.864;
		LEVEL adc_state.adc_data_load FOR 20.833;
		LEVEL adc_state.idle FOR 20.833;
		LEVEL adc_state.adc_ready FOR 2624.958;
		LEVEL adc_state.adc_receive FOR 3136.166;
	}
}

TRANSITION_LIST("data_out[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 44218.043;
		LEVEL 1 FOR 5781.957;
	}
}

TRANSITION_LIST("data_out[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
	}
}

TRANSITION_LIST("data_out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
	}
}

TRANSITION_LIST("data_out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 44218.043;
		LEVEL 1 FOR 5781.957;
	}
}

TRANSITION_LIST("data_out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
	}
}

TRANSITION_LIST("data_out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
	}
}

TRANSITION_LIST("data_out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 44218.043;
		LEVEL 1 FOR 5781.957;
	}
}

TRANSITION_LIST("data_out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
	}
}

TRANSITION_LIST("data_ready")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 44197.21;
		LEVEL 1 FOR 20.833;
		LEVEL 0 FOR 5781.957;
	}
}

TRANSITION_LIST("div_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1489.56;
		NODE
		{
			REPEAT = 72;
			LEVEL 1 FOR 20.833;
			LEVEL 0 FOR 645.823;
		}
		LEVEL 1 FOR 20.833;
		LEVEL 0 FOR 490.375;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "enable";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "reset";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "div_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sdat_in";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "adc_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
	CHILDREN = 7, 8, 9, 10, 11, 12;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "bit_count[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "cs_n";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "adc_state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "data_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
	CHILDREN = 16, 17, 18, 19, 20, 21, 22, 23;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "data_ready";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 12925;
	MASTER = FALSE;
}

TIME_BAR
{
	TIME = 14895000;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 43740000;
	MASTER = FALSE;
}
;
